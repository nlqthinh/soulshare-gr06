@{
    Layout = null;
    ViewBag.Title = "Index";
    var user = (SoulShare_Group06.Models.Customer)System.Web.HttpContext.Current.Session["user"];
    var room = (SoulShare_Group06.Models.Room)System.Web.HttpContext.Current.Session["room"];
}




<!DOCTYPE html>
<html>
<head>
    <title>Phòng chat</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
          integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/Content/css/chat.css">
    <script src="https://www.gstatic.com/firebasejs/5.0.4/firebase.js"></script>

    <style type="text/css">
        video {
               display:none;
        }
    </style>
</head>
<body onload="showMyFace()">
    <div class="wrapper">
        <button id="quitBtn">Thoát</button>
        <h2>Room @room.room_id</h2> <!-- Print the room number -->
        <p>User @user.customer_name </p>
        <div class="chatbox">
            <div class="chatbox-media">
                <video id="yourVideo" autoplay muted>
                </video>
                <video id="friendsVideo" autoplay>
                </video>
                <div class="chatbox-image">
                    <img src="~/Content/images/user.png" class="chatbot-image-user">
                </div>
                <div class="chatbox-name">You</div>
                <div class="chatbox-mic" id="mic-toggle">
                    <i class="fa-solid fa-microphone-slash" id="toggleMicButton" onclick="toggleMic()"></i>
                </div>
                <div class="chatbox-image">
                    <img src="~/Content/images/user.png" class="chatbot-image-user">
                </div>
                <div class="chatbox-name">Other Side</div>
                <div class="chatbox-mic">
                    <i class="fa-solid fa-microphone-slash" id="otherMicStatus"></i>
                </div>
            </div>

            <div class="chatbot-main">
                <ul class="chat-thread" id="discussion">
                </ul>
                <div class="chat-window row">
                    <input class="chat-window-message" name="chat-window-message" type="text" autocomplete="off"
                           autofocus id="message" />
                    <input type="button" class="send-btn" id="sendmessage" value="Gửi" />
                    <input type="hidden" id="displayname" value="@user.customer_name" />

                </div>

            </div>
        </div>
    </div>


    <br />
    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.4.3.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script type="text/javascript">


    $(function () {
            // Declare a proxy to reference the hub.
        var chat = $.connection.chatHub;

        // Execute the quitRoom function when the page is about to be unloaded
        window.addEventListener('beforeunload', function () {
            // Use navigator.sendBeacon to asynchronously send a request to the server
            navigator.sendBeacon('@Url.Action("QuitRoom", "Room")', null);

            // Send a message to the server when the user leaves the room
            chat.server.send('Hệ thống', '@user.customer_name đã rời khỏi phòng');
            quitRoomSync(); // Use a synchronous AJAX request to ensure the server is notified before leaving the page
        });

        // Attach the quitRoom function to the button click event as before
        //var quitBtn = document.getElementById('quitBtn');
        //quitBtn.onclick = function () {
        //    quitRoom();
        //};
            // Attach the quitRoom function to the button click event
        $('#quitBtn').click(function () {
                quitRoom();
        });

        // Define quitRoom function as before
        function quitRoom() {
            // Call an AJAX function to inform the server about quitting the room
            $.ajax({
                url: '@Url.Action("QuitRoom", "Room")',
                type: 'POST',
                async: false, // Use synchronous request to ensure the server is notified before leaving the page
                success: function (data) {
                    // Handle success if needed
                    console.log("Quit room successful");
                    chat.server.send('Hệ thống', '@user.customer_name đã rời khỏi phòng');
                    chat.server.quitRoom('@room.room_id');
                    window.location.href = '@Url.Action("Index", "Home")';
                },
                error: function () {
                    // Handle error if needed
                    console.log("Error quitting room");
                }
            });
        }

        // Define a synchronous version of quitRoom for use with beforeunload
        function quitRoomSync() {
            $.ajax({
                url: '@Url.Action("QuitRoom", "Room")',
                type: 'POST',
                async: false, // Use synchronous request to ensure the server is notified before leaving the page
                success: function (data) {
                    // No need to handle success or redirect here since the page is about to be unloaded
                    console.log("Quitting room beforeunload");
                    chat.server.send('Hệ thống', '@user.customer_name đã rời khỏi phòng');
                    chat.server.quitRoom('@room.room_id');
                },
                error: function () {
                    // Handle error if needed
                    console.log("Error quitting room beforeunload");
                }
            });
        }
            chat.client.broadcastMessage = function (name, message) {
                // Html encode display name and message.
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                var messageClass = name === '@user.customer_name' ? 'chat-message-current-user' : 'chat-message-other-user';

                // Add the message to the page with the appropriate class for styling.
                $('#discussion').append('<li class="' + messageClass + '"><strong>' + encodedName
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };
            // Set initial focus to message input box.
            $('#message').focus();

            // Start the connection.
            $.connection.hub.start().done(function () {
                chat.server.joinRoom('@room.room_id');
                // Print a message when the user joins the room.
                chat.server.send('Hệ thống', '@user.customer_name đã tham gia phòng');

                $('#message').keypress(function (e) {
                    var key = e.which;
                    if (key == 13) { // the Enter key
                        $('#sendmessage').click();
                        return false; // prevent the default behavior
                    }
                });

                $('#sendmessage').click(function () {
                    // Check if the message is not empty
                    var message = $('#message').val().trim(); // Trim whitespace
                    if (message) { // If the message is not empty
                        // Call the Send method on the hub.
                        chat.server.send($('#displayname').val(), message);
                        // Clear text box and reset focus for the next comment.
                        $('#message').val('').focus();
                    }
                });
            });
        });

        /*WebRTC part*/
        var config = {
            apiKey: "AIzaSyDYA4OkdWqaqGHXaB0y787TpSbduD97w90",
            authDomain: "testrtc-5b2a1.firebaseapp.com",
            databaseURL: "https://testrtc-5b2a1-default-rtdb.firebaseio.com",
            projectId: "testrtc-5b2a1",
            storageBucket: "testrtc-5b2a1.appspot.com",
            messagingSenderId: "918744324692",
            appId: "1:918744324692:web:2f7cf4af189b0482d62bc1",
        };
        firebase.initializeApp(config);

        var roomID = "@room.room_id"; // Assuming this retrieves the current room ID from your server-side code
        var database = firebase.database().ref(roomID); // Reference to the specific room in the database

        var yourVideo = document.getElementById("yourVideo");
        var friendsVideo = document.getElementById("friendsVideo");
        var yourId = Math.floor(Math.random() * 1000000000);
        var servers = {
            iceServers: [
                { urls: "stun:stun.services.mozilla.com" },
                { urls: "stun:stun.l.google.com:19302" },
                {
                    urls: "turn:numb.viagenie.ca",
                    credential: "webrtc",
                    username: "websitebeaver@mail.com",
                },
            ],
        };
        var pc = new RTCPeerConnection(servers);
        pc.onicecandidate = (event) =>
            event.candidate ? sendMessage(yourId, JSON.stringify({ ice: event.candidate })) : console.log("Sent All Ice");
        pc.onaddstream = (event) => (friendsVideo.srcObject = event.stream);

        var localStream;
        var micEnabled = false; // Set micEnabled to false initially
        var toggleMicButton = document.getElementById("toggleMicButton");
        var otherMicStatus = document.getElementById("otherMicStatus");

        function sendMessage(senderId, data) {
            var msg = database.push({ sender: senderId, message: data });
            msg.remove();
        }
        function readMessage(data) {
            var msg = JSON.parse(data.val().message);
            var sender = data.val().sender;
            if (sender != yourId) {
                if (msg.ice != undefined) {
                    pc.addIceCandidate(new RTCIceCandidate(msg.ice));
                } else if (msg.sdp && msg.sdp.type == "offer") {
                    // Check if msg.sdp is defined
                    pc.setRemoteDescription(new RTCSessionDescription(msg.sdp))
                        .then(() => pc.createAnswer())
                        .then((answer) => pc.setLocalDescription(answer))
                        .then(() =>
                            sendMessage(yourId, JSON.stringify({ sdp: pc.localDescription }))
                        );
                } else if (msg.sdp && msg.sdp.type == "answer" && pc.signalingState == "have-local-offer") {
                    // Check if msg.sdp is defined and signaling state is correct
                    pc.setRemoteDescription(new RTCSessionDescription(msg.sdp))
                        .catch(error => console.error("Error setting remote description:", error));
                } else if (msg.micStatus !== undefined) {
                    // Update microphone status of the other side
                    updateOtherMicStatus(msg.micStatus);
                }
            }
        }

        database.on("child_added", readMessage);

        //function showMyFace() {
        //    navigator.mediaDevices
        //        .getUserMedia({
        //            audio: {
        //                autoGainControl: false,
        //                channelCount: 2,
        //                echoCancellation: false,
        //                latency: 0,
        //                noiseSuppression: false,
        //                sampleRate: 48000,
        //                sampleSize: 16,
        //                volume: 1.0,
        //            },
        //            video: false,
        //        })
        //        .then((stream) => {
        //            yourVideo.srcObject = stream;
        //            localStream = stream;
        //            // Mute the microphone tracks initially
        //            localStream.getAudioTracks().forEach((track) => {
        //                track.enabled = false;
        //            });
        //            pc.addStream(stream);
        //            // Call showFriendsFace directly after getting the user's media stream
        //            showFriendsFace();
        //        });
        //}

        function showMyFace() {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                navigator.mediaDevices.getUserMedia({
                    audio: {
                        autoGainControl: false,
                        channelCount: 2,
                        echoCancellation: false,
                        latency: 0,
                        noiseSuppression: false,
                        sampleRate: 48000,
                        sampleSize: 16,
                        volume: 1.0,
                    },
                    video: false,
                })
                    .then((stream) => {
                        yourVideo.srcObject = stream;
                        localStream = stream;
                        localStream.getAudioTracks().forEach((track) => {
                            track.enabled = false;
                        });
                        pc.addStream(stream);
                        showFriendsFace();
                    })
                    .catch((error) => {
                        console.error('Error accessing user media:', error);
                    });
            } else {
                console.error('getUserMedia is not supported in this browser');
            }
        }

        function showFriendsFace() {
            pc.createOffer().then((offer) => {
                return pc
                    .setLocalDescription(offer)
                    .then(() => {
                        let answer = pc.localDescription;
                        answer.sdp = answer.sdp.replace(
                            "useinbandfec=1",
                            "useinbandfec=1; stereo=1; maxaveragebitrate=510000"
                        );
                        return pc.setLocalDescription(answer);
                    })
                    .then(() => {
                        sendMessage(yourId, JSON.stringify({ sdp: pc.localDescription }));
                    });
            });
        }

        function toggleMic() {
            if (localStream) {
                localStream.getAudioTracks().forEach((track) => {
                    track.enabled = !track.enabled;
                });
                micEnabled = !micEnabled;
                var micToggle = document.getElementById("toggleMicButton");
                micToggle.classList.toggle("fa-microphone-slash");
                micToggle.classList.toggle("fa-microphone");
                console.log(micEnabled ? "Microphone enabled" : "Microphone muted");
                // Broadcast microphone status to the other side
                sendMessage(yourId, JSON.stringify({ micStatus: micEnabled }));
            }
        }


        function updateOtherMicStatus(enabled) {
            micToggle.classList.toggle("fa-microphone-slash", !enabled);
            micToggle.classList.toggle("fa-microphone", enabled);
        }

        //function toggleMic() {
        //    if (localStream) {
        //        localStream.getAudioTracks().forEach((track) => {
        //            track.enabled = !track.enabled;
        //        });
        //        micEnabled = !micEnabled;
        //        updateMicButton();
        //        console.log(micEnabled ? "Microphone enabled" : "Microphone muted");
        //        // Broadcast microphone status to the other side
        //        sendMessage(yourId, JSON.stringify({ micStatus: micEnabled }));
        //    }
        //}

        //function updateMicButton() {
        //    if (micEnabled) {
        //        toggleMicButton.classList.remove("mic-muted");
        //        toggleMicButton.classList.add("mic-enabled");
        //    } else {
        //        toggleMicButton.classList.remove("mic-enabled");
        //        toggleMicButton.classList.add("mic-muted");
        //    }
        //}

        function updateOtherMicStatus(enabled) {
            var otherMicIcon = document.getElementById("otherMicStatus");
            otherMicIcon.classList.toggle("fa-microphone-slash", !enabled);
            otherMicIcon.classList.toggle("fa-microphone", enabled);
        }

    </script>
</body>
</html>